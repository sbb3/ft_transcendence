generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  level          String?
  friends      Int[] 
  blocked     Int[]
  email                String   @unique
  username             String   @unique
  name                 String
  avatar               String
  campus               String
  status               String
  game_wine            Int
  is_otp_enabled       Boolean  @default(false)
  is_profile_completed Boolean  @default(false)
  is_otp_validated     Boolean  @default(false)
  otp_secret           String?
  not_req request[] @relation(name: "user")
  player_one game[] @relation(name: "player_one")
  player_two game[] @relation(name: "player_two")
  send_req request[] @relation(name: "user_send")
}


model game {
  id Int    @id @default(autoincrement())
  send_as_request request[]
  player_one       user     @relation(fields: [player_one_id], references: [id], name: "player_one")
  player_one_id     Int
  player_two user   @relation(fields:  [player_two_id], references: [id], name: "player_two")
  player_two_id Int
  id_winer Int
  player_one_score Int
  player_two_score Int
  status String
  createdAt   DateTime  @default(now())
}

model channel {
  id			Int	@id @default(autoincrement())
  createdAt		DateTime @default(now())
  ownerId		Int
  name			String @unique
  privacy		String
  password		String?
  description	String
  banned		Int[]

  members		channelMember[] @relation("channelMembers")
}

model channelMember {
  id		Int @id @default(autoincrement())
  role		String
  userId	Int
  isMuted	Boolean @default(false)

  channelId	Int?
  inChannel	channel? @relation("channelMembers", fields: [channelId], references: [id])
}

model channelMessage {
	id			Int	@id @default(autoincrement())
	createdAt	DateTime @default(now())
	channelId	Int
	content		String
	senderId	Int
	receivers	Int[]
}

model messageData {
	id						String @unique
	conversationId			String
	sender        Int
	receiver				Int
	content					String
	lastMessageCreatedAt	DateTime @default(now())
}

model conversation {
	id						        String @unique
	firstMember				    Int
	secondMember			    Int
	lastMessageContent		String?
	lastMessageCreatedAt	DateTime?
}

model notification {
  id			String @unique
  conversationId	String? @default("")
  type		String
  senderId	Int
  receiverId	Int
  createdAt	DateTime @default(now())
}


model request {
  id Int    @id @default(autoincrement())
  user       user     @relation(fields: [userId], references: [id], name: "user")
  userId     Int
  is_req_fr_acc Boolean @default(false)
  id_user_send user   @relation(fields:  [user_snd], references: [id], name: "user_send")
  user_snd Int
  id_game_send game   @relation(fields: [id_game], references: [id])
  id_game Int
  time_exper   DateTime @default(dbgenerated("NOW() + interval '1 year'"))
  is_exper  Boolean @default(false)
  is_seen  Boolean @default(false)
  is_delete  Boolean @default(false)
}

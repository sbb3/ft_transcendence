// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
	id             Int            @id @default(autoincrement())
	createdAt      DateTime       @default(now())
	max_score      Int?
	level          String?
	friends_users  friend_user[]
	blocked_users  blocked_user[]
	not_req        request[]      @relation(name: "user")
	send_req       request[]      @relation(name: "user_send")
	not_info       notification[] @relation(name: "user")
	send_info      notification[] @relation(name: "user_send")
	player_one     game[]         @relation(name: "player_one")
	player_two     game[]         @relation(name: "player_two")
	achievements   achievement[]
	// achievement achievement? @relation("user", fields: [achievement_id], references: [id])
	achievement_id Int?
	// msg_send message[]
	member         membership[]
	// send_req request[]

	// Here auth/chat user infos
	email                String   @unique
	username             String   @unique
	name                 String
	avatar               String
	campus               String?
	status                String?
	is_profile_completed Boolean  @default(false)
	is_otp_enabled       Boolean  @default(false)
	is_otp_validated     Boolean  @default(false)
	otp_secret           String?
	// channels channel[]
}

// The owner can change the name, the description, the password, remove the channel.
model channel {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  owner       String
  privacy     String
  password    String?
  description String
  createdAt   DateTime @default(now())

//   members user[]
  // admins user[]
  // muted user[]
  // kicked user[]
  // banned user[]
}

// model channelMessages {
// lastMessageCreatedAt
// add receivers (members who can see the messages)
// channelId
// content
// senderId
// createdAt
// message id
// }

model achievement {
  id                Int            @id @default(autoincrement())
  notification_send notification[]
  level_for_get_it  Int
  title             String
  achevement_image  String
  users             user[]
  // user user? @relation("achievement", fields: [user_id], references: [id])
  user_id           Int
}

model friend_user {
  id       Int     @id @default(autoincrement())
  user     user    @relation(fields: [userId], references: [id])
  userId   Int
  is_mute  Boolean @default(false)
  unfriend Boolean @default(false)
  // message_reseve message[]
}

model blocked_user {
  id      Int     @id @default(autoincrement())
  user    user    @relation(fields: [userId], references: [id])
  userId  Int
  unblock Boolean @default(false)
}

// model user_achievements {
//   id Int    @id @default(autoincrement())
// }

model notification {
  id              Int         @id @default(autoincrement())
  user            user        @relation(fields: [userId], references: [id], name: "user")
  userId          Int
  is_req_fr_acc   Boolean     @default(false)
  id_user_send    user        @relation(fields: [user_snd], references: [id], name: "user_send")
  user_snd        Int
  type            String
  content         String
  is_seen         Boolean     @default(false)
  is_delete       Boolean     @default(false)
  id_achevement   achievement @relation(fields: [achievement_get], references: [id])
  achievement_get Int
}

model request {
  id            Int      @id @default(autoincrement())
  user          user     @relation(fields: [userId], references: [id], name: "user")
  userId        Int
  is_req_fr_acc Boolean  @default(false)
  id_user_send  user     @relation(fields: [user_snd], references: [id], name: "user_send")
  user_snd      Int
  id_game_send  game     @relation(fields: [id_game], references: [id])
  id_game       Int
  time_exper    DateTime @default(dbgenerated("NOW() + interval '1 year'"))
  is_exper      Boolean  @default(false)
  is_seen       Boolean  @default(false)
  is_delete     Boolean  @default(false)
}

model game {
  id               Int       @id @default(autoincrement())
  send_as_request  request[]
  player_one       user      @relation(fields: [player_one_id], references: [id], name: "player_one")
  player_one_id    Int
  player_two       user      @relation(fields: [player_two_id], references: [id], name: "player_two")
  player_two_id    Int
  id_winer         Int
  theme            String
  player_one_score Int
  player_two_score Int
  status           String
  createdAt        DateTime  @default(now())
}

// model message {
// createdAt   DateTime  @default(now())
// id_send user @relation(fields: [user_id], references: [id])
// user_id Int
// id_channel channel @relation(fields: [channel_id], references: [id])
// channel_id Int
// id_friend friend_user @relation(fields: [reseve_id], references: [id])
// reseve_id Int
// cont String
// @@id([user_id, channel_id, reseve_id])
// id
// channel_id
// sender_name
// message_content
// createdAt
// }

model membership {
  // id Int    @id @default(autoincrement())
  id_send    user    @relation(fields: [user_id], references: [id])
  user_id    Int
  // id_channel channel @relation(fields: [channel_id], references: [id])
  channel_id Int
  is_admine  Boolean @default(false)
  is_muted   Boolean @default(false)
  is_banned  Boolean @default(false)

  @@id([user_id, channel_id])
}

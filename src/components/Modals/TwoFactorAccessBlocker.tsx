import {
  Box,
  Button,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Heading,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalOverlay,
  PinInput,
  PinInputField,
  Stack,
  Text,
  VStack,
} from "@chakra-ui/react";
import { Controller, useForm } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { useToast } from "@chakra-ui/react";
import { ReactNode, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useLottie } from "lottie-react";
import animationData from "src/assets/animations/animation_fingerprint.json";
import { useDispatch, useSelector } from "react-redux";
import usersApi, { useValidateOTPMutation } from "src/features/users/usersApi";
import store from "src/app/store";
import authApi from "src/features/auth/authApi";

const pinSchema = yup.object().shape({
  pin: yup
    .string()
    .required("Verification code is required")
    .min(6, "Minimum and Maximum length should be 6")
    .trim(),
});

const style = {
  width: "200px",
  color: "orage",
};

const options = {
  loop: true,
  autoplay: true,
  animationData,
};
// TODO: View does not get rendered on the first time, it gets rendered on the second time
const TwoFactorAccessBlocker = ({
  isOTPAccessBlockerOpen,
  onOTPAccessBlockerToggle,
}) => {
  const userId = useSelector((state: any) => state?.auth?.userId);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { View } = useLottie(options, style);
  const toast = useToast();
  const {
    register,
    handleSubmit,
    control,
    formState: { errors },
    reset,
  } = useForm({
    resolver: yupResolver(pinSchema),
  });

  const [triggerGetCurrentUser, { isLoading: isLoadingGetCurrentUser }] =
    usersApi.useLazyGetCurrentUserQuery();

  const [validateOTP, { isLoading: isValidatingOTP }] =
    useValidateOTPMutation();

  const onOTPValidation = async (data: any) => {
    console.log("PIN: ", data);

    try {
      await validateOTP({
        userId: userId,
        userPin: data?.pin,
      }).unwrap();
      toast({
        title: "2FA Validation",
        description: "Access granted.",
        status: "success",
        duration: 2000,
        isClosable: true,
      });
      reset({
        pin: "",
      });
      // onOTPAccessBlockerToggle();
      await triggerGetCurrentUser(userId);
      // TODO: logout user
    } catch (error) {
      console.log("error: ", error);
      toast({
        title: "Error",
        description: "Verification code is incorrect.",
        status: "error",
        duration: 2000,
        isClosable: true,
      });
    }
  };
  return (
    <Modal
      isOpen={isOTPAccessBlockerOpen}
      onClose={onOTPAccessBlockerToggle}
      closeOnEsc={false}
      closeOnOverlayClick={false}
      isCentered={true}
      // size="xl"
    >
      <ModalOverlay />{" "}
      <ModalContent
        borderRadius={40}
        // maxH="350px"
        maxW="400px"
        mt={4}
        border="1px solid rgba(251, 102, 19, 0.3)"
        boxShadow="0px 4px 24px -1px rgba(0, 0, 0, 0.35)"
        backdropFilter={"blur(20px)"}
        bgImage={`url('src/assets/img/BlackNoise.png')`}
        bgSize="cover"
        bgRepeat="no-repeat"
        bg="transparent"
      >
        <ModalBody p={2} borderRadius={40}>
          <VStack
            mt={0}
            spacing={4}
            align="center"
            borderRadius={40}
            pl={3}
            pr={2}
          >
            <Flex justifyContent="center" alignItems="center">
              <Box display="block">{View}</Box>
            </Flex>

            <Stack spacing={3} w={"full"} align={"center"}>
              <Heading fontSize="lg" fontWeight="semibold">
                Authenticate Your Account
              </Heading>
              <Text fontSize="sm" fontWeight="medium" color={"whiteAlpha.700"}>
                Enter the access code generated by Google App
              </Text>
            </Stack>
            <Box w={"full"}>
              <FormControl isInvalid={!!errors.pin} mt={0} isRequired>
                <Flex
                  direction={"column"}
                  justify="center"
                  align="start"
                  w="full"
                  // outline="1px solid yellow"
                >
                  <FormLabel
                    htmlFor="pin"
                    fontSize="md"
                    color={"whiteAlpha.700"}
                  >
                    Verification Code
                  </FormLabel>
                  <Controller
                    name="pin"
                    control={control}
                    defaultValue=""
                    render={({ field: { ref, ...restField } }) => (
                      <Flex justify="center" align="center" flex={1} w={"full"}>
                        <PinInput
                          size="lg"
                          {...restField}
                          errorBorderColor="red.300"
                          focusBorderColor="orange.300"
                          isInvalid={!!errors.pin}
                        >
                          <PinInputField ref={ref} />
                          <PinInputField />
                          <PinInputField />
                          <PinInputField />
                          <PinInputField />
                          <PinInputField />
                        </PinInput>
                      </Flex>
                    )}
                  />
                  {errors?.pin && (
                    <FormErrorMessage>{errors?.pin?.message}</FormErrorMessage>
                  )}
                </Flex>
              </FormControl>
            </Box>
          </VStack>
        </ModalBody>

        <ModalFooter p={3}>
          <Button
            bg={"white"}
            color={"orange.500"}
            letterSpacing={1}
            mr={3}
            onClick={async () => {
              // TODO: uncomment below dispatch later and remove localStorage.clear()
              await store.dispatch(authApi.endpoints.sendLogOut.initiate({}));
              localStorage.clear();
              // onOTPAccessBlockerToggle();
              navigate("/login", { replace: true });
            }}
            _hover={{
              bg: "WhiteAlpha.800",
            }}
            _active={{
              bg: "whiteAlpha.800",
            }}
            _focus={{
              bg: "whiteAlpha.800",
              boxShadow: "none",
            }}
          >
            Close
          </Button>
          <Button
            bg={"orange.500"}
            color={"white"}
            mr={3}
            letterSpacing={1}
            isLoading={isValidatingOTP}
            isDisabled={isValidatingOTP}
            cursor="pointer"
            onClick={handleSubmit(onOTPValidation)}
            _hover={{
              bg: "orange.400",
            }}
            _active={{
              bg: "orange.400",
            }}
            _focus={{
              bg: "orange.400",
              boxShadow: "none",
            }}
          >
            Let me in
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

export default TwoFactorAccessBlocker;
